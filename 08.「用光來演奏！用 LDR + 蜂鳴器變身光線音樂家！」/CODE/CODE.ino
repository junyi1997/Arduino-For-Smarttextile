// === 腳位定義 ===
const int buzzer = 9;         // 蜂鳴器接在數位腳位 D9
const int ldrPin = A0;        // 光敏電阻接在類比腳位 A0

// === 音符頻率陣列（Hz）===
// 這是一段旋律的主旋律頻率
int melody[] = {
  294, 330, 370, 330, 294, 262, 294, 330,
  370, 330, 294, 262, 220, 294, 330, 294,
  262, 247, 220, 262, 294, 262, 220, 196,
  220, 247, 262, 247, 220, 196, 220, 247,
  262, 247, 220, 196, 175, 220, 247, 220,
  196, 185, 175, 196, 220, 196, 175, 165,
  196, 220, 247, 220, 196, 175, 196, 220,
  247, 220, 196, 175, 165, 196, 220, 196,
  175, 165, 147, 175, 196, 175, 147, 131
};

// === 音符對應的節奏時值（單位：毫秒）===
// 每個音符持續的時間，需與 melody[] 對應
int durations[] = {
  300, 300, 300, 300, 300, 300, 300, 300,
  300, 300, 300, 500, 300, 300, 300, 300,
  300, 300, 300, 300, 300, 300, 300, 500,
  300, 300, 300, 300, 300, 300, 300, 300,
  300, 300, 300, 500, 300, 300, 300, 300,
  300, 300, 300, 300, 300, 300, 300, 500,
  300, 300, 300, 300, 300, 300, 300, 300,
  300, 300, 300, 500, 300, 300, 300, 300,
  300, 300, 300, 300, 300, 300, 300, 500
};

// 計算總共有多少個音符
int noteCount = sizeof(melody) / sizeof(melody[0]);

void setup() {
  pinMode(buzzer, OUTPUT);      // 將 buzzer 腳位設為輸出
  Serial.begin(9600);           // 啟動序列監看器，用於除錯與觀察
}

void loop() {
  // 使用 for 迴圈依序播放所有音符
  for (int i = 0; i < noteCount; i++) {
    int lightVal = analogRead(ldrPin);  // 讀取光敏電阻的數值（範圍：0~1023）

    // 使用 map() 根據光線強度調整 tempo，光越亮 → 速度越快
    int tempo = map(lightVal, 0, 1023, durations[i] * 2, durations[i] / 2);

    // 在序列埠輸出目前播放的音符與速度資訊
    Serial.print("Note ");
    Serial.print(i);
    Serial.print(": ");
    Serial.print(melody[i]);
    Serial.print(" Hz | Tempo: ");
    Serial.println(tempo);

    // 使用 tone() 播放蜂鳴器指定頻率
    tone(buzzer, melody[i]);
    delay(tempo);               // 播放時間依照光敏電阻決定

    // 停止發聲
    noTone(buzzer);
    delay(tempo / 4);           // 加入短暫停頓使節奏更自然
  }

  delay(1500);                  // 播完全部音符後暫停 1.5 秒再重複播放
}
